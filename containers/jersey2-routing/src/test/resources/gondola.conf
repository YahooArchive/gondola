# Config format: HOCON
# https://github.com/typesafehub/config/blob/master/HOCON.md

# The hostId and clusterId are arbitrary unique strings that are manually assigned.
gondola {
  hosts = [
    { hostId = "host1", siteId = "gq1", host = "localhost", port = "2181", appScheme = "http", appPort = "8080"},
    { hostId = "host2", siteId = "bf1", host = "localhost", port = "2182", appScheme = "http", appPort = "8081"},
    { hostId = "host3", siteId = "bf2", host = "localhost", port = "2183", appScheme = "http", appPort = "8082"},
  ]
  clusters = [
    {
      clusterId = "cluster1", bucketMap = "1-100,201",
      hosts = [
        {hostId: "host1", memberId: "81"},
        {hostId: "host2", memberId: "82"},
        {hostId: "host3", memberId: "83"}
      ],
    },
    {
      clusterId = "cluster2", bucketMap = "101-200",
      hosts = [
        {hostId: "host3", memberId: "86"},
        {hostId: "host2", memberId: "85"},
        {hostId: "host1", memberId: "84"},
      ],
    }
  ],
  sites = [
    {
      siteId = "gq1",
      storage_mysql {
        url = "jdbc:mysql://db1.gq1.yahoo.com/awesomeProject"
        ssh_user = "db_backup", ssh_passphrase = "secret", ssh_private_key = "~/.ssh/identity"
      }
    },
    {
      siteId = "ne1",
      storage_mysql {
        url = "jdbc:mysql://db1.ne1.yahoo.com/awesomeProject"
      }
    },
    {
      siteId = "bf1",
      storage_mysql {
        url = "jdbc:mysql://db1.bf1.yahoo.com/awesomeProject"
      }
    },
  ]
}

##################### raft

raft {
  # The leader sends a heartbeat at this interval (ms)
  heartbeat_period = 250

  # A follower will become a candidate if it has not received a heartbeat within this period (ms)
  election_timeout = 3000

  # A leader will become a candidate if it has not heard from floor(N/2) followers,
  # where N is the number of nodes in the cluster (ms)
  leader_timeout = 10000

  # A candidate will send out a request vote within this period.
  # The actual value is a random value in [0, this value]. (ms)
  request_vote_period = 300

  command_max_size = 1000
}

##################### gondola

gondola {
  # All the configs in this file are reloaded with this interval (ms).
  # Some of the configs are dynamic which means the new value will take effect immediately.
  config_reload_period = 10000

  # Warning messages are displayed when the number of created command objects exceed this size
  command_pool_warn_threshold = 1000

  # The command queue holds commands awaiting to be assigned a raft index
  command_queue_size = 200

  # Warning messages are displayed if the number of created messages exceed this size
  message_pool_warn_threshold = 1000

  # The incoming queue can hold this many messages before blocking
  incoming_queue_size = 100

  # Commands are no longer processed while the wait queue is longer than this value
  wait_queue_throttle_size = 100

  # If true, commands are batched into a single message when there are multiple commands
  # in the command queue. Dynamic.
  batching = true

  # The directory in which to create file locks to prevent multiple copies of a member from running
  file_lock_dir = "/tmp"
}

tracing {
  # Gondola prints out details of it's internal queues and pools at the specified period (ms)
  # Dynamic.
  summary_period = 5000

  # If true, all raft messages except heartbeats are printed. Dynamic.
  raft_messages = false

  # If true and raft_messages is true, heartbeats are also printed. Dynamic.
  raft_heartbeats = true

  # If true, shows all command activity. Dynamic.
  command = false

  # If true, shows all storage activity. Dynamic.
  storage = false

  # If true, bytes sent and received are printed. Dynamic.
  network = false

  # If true, the message leak detector is enabled. Any messages that are not checked in and lost,
  # are printed. Dynamic.
  message_leak = false
}

##################### storage

storage {
  impl = storage_h2

  # The number of threads used to write into the log concurrently
  # Changing this value at runtime has no effect.
  save_queue_workers = 5
}


storage_mysql {
  class = com.yahoo.gondola.impl.MySQLdbStorage
  user = mysql_user
  password = "topSecret"
  port = 3306
  type = mysql
}

storage_h2 {
  class = com.yahoo.gondola.impl.H2dbStorage

  # Embedded mode
  url = "jdbc:h2:/tmp/gondola-db-$hostId"

  # Server mode
  #url = "jdbc:h2:tcp://localhost/~/test"

  user = sa
  password = ""
  port = 9092
  type = h2
}

##################### network

network {
  impl = network_socket

  # A channel will be discarded if after sending a message and there is no response for this period. (ms)
  channel_inactivity_timeout = 10000
}

network_socket {
  class = com.yahoo.gondola.impl.SocketNetwork

  # When a connection to a remote member is not valid, this is the period at which a reconnect is attempted. (ms)
  create_socket_retry_period = 1000

  # Timeouts for socket connects
  connect_timeout = 60000
}

network_memory {
  class = com.yahoo.gondola.impl.MemoryNetwork
}

##################### clock

clock {
  impl = clock_system
}

clock_system {
  class = com.yahoo.gondola.impl.SystemClock
}

##################### gondola command

tracing {
  cli {
    # Enables tracing in GondolaAgent. Dynamic.
    agent = false

    # Enables tracing in GondolaCommand. Dynamic.
    command = false
  }
}
